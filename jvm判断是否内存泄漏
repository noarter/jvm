前言
对于线上的JAVA应用程序会借助各种工具来监控其健康状况，判断的指标不外乎端口是否可用、平均响应时间、JVM使用情况等，那么判断这些指标正常与否的标准又怎么来确定呢？下面以线上应用程序问题定位的常用方法来分析这些过程，以便确定合理的标准。

GC日志分析判断JVM内存问题
先使用命令查看某java应用的GC情况，PID即JAVA应用的进程号，1s即每隔1s收集一次

$ jstat -gcutil PID 1s

注：jdk1.8与之区别在没有P区，换成了M区（Metaspace区，内存空间不在JVM内部，而是直接使用的本地内存）。

1）Young（年轻代）
年轻代分三个区。一个Eden区，两个 Survivor区。大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到Survivor区（两个中的一个），当这个 Survivor区满时，此区的存活对象将被复制到另外一个Survivor区，当这个Survivor去也满了的时候，从第一个Survivor区复制 过来的并且此时还存活的对象，将被复制”年老区(Tenured)”。需要注意，Survivor的两个区是对称的，没先后关系，所以同一个区中可能同时 存在从Eden复制过来 对象，和从前一个Survivor复制过来的对象，而复制到年老区的只有从第一个Survivor去过来的对象。而且，Survivor区总有一个是空的。

2）Tenured（年老代）
年老代存放从年轻代存活的对象。一般来说年老代存放的都是生命期较长的对象。
 
3）Perm（持久代）
用于存放静态文件，如今Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate等， 在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。持久代大小通过-XX:MaxPermSize=进行设置。JDK1.8中的Metaspce用-XX:MetaspaceSize= -XX:MaxMetaspaceSize= 进行设置。
 
GC类型
GC有两种类型：Scavenge GC和Full GC。

1）Scavenge GC
一般情况下，当新对象生成，并且在Eden申请空间失败时，就好触发Scavenge GC，堆Eden区域进行GC，清除非存活对象，并且把尚且存活的对象移动到Survivor区。然后整理Survivor的两个区。
2）Full GC
对整个堆进行整理，包括Young、Tenured和Perm。Full GC比Scavenge GC要慢，因此应该尽可能减少Full GC。有如下原因可能导致Full GC：
1）Tenured被写满
2）Perm域被写满
3）System.gc()被显示调用
4）上一次GC之后Heap的各域分配策略动态变化
Full GC完成后Tenured区会回到某一个固定的大小，多次回收后这个值基本固定在那个值，如果回收后值不断增大，则可以断定程序存在内存泄漏，最后必然导致Java应用出现OOM异常。

小结
jstat -gcutil命令最重要的几个指标分别为YGC列、YGCT列、FGC列、FGCT列。
正常状况下，YGC列会一直变化，但（YGCT列/YGC列）的值会很小，一般在几毫秒～几十毫秒，如果上百毫秒，则需要留意；
正常状况下，FGC列不会频繁变化，如果频繁增加，则说明此应用GC频繁，可能存在内存泄漏问题或者JVM的参数设置不合理。另外需要看（FGCT列/FGC列）的值，一般是毫秒级，如果达到秒级，则需要留意JVM的参数-Xmx是否设置得合理。

JVM Heap Dump判断JVM内存问题
常见的内存溢出产生的原因有如下几类：

资源没有释放，譬如io流的操作没有进行close操作；
定义了全局的static变量；
消费者能力不够，导致等待队列中数据不断增大；
有些业务场景设计不合理，在某些特定条件下会触发加载大量的数据，直接导致内存溢出。


先使用命令查看某java应用的堆使用情况，PID即JAVA应用的进程号

$ jmap -heap PID
Attaching to process ID 5184, please wait...
Debugger attached successfully.
Server compiler detected.
JVM version is 25.131-b11
using thread-local object allocation.
 
Parallel GC with 4 thread(s)
Heap Configuration:
   MinHeapFreeRatio         = 0
   MaxHeapFreeRatio         = 100
   MaxHeapSize              = 805306368 (768.0MB)
   NewSize                  = 44564480 (42.5MB)
   MaxNewSize               = 268435456 (256.0MB)
   OldSize                  = 89653248 (85.5MB)
   NewRatio                 = 2
   SurvivorRatio            = 8
   MetaspaceSize            = 21807104 (20.796875MB)
   CompressedClassSpaceSize = 1073741824 (1024.0MB)
   MaxMetaspaceSize         = 17592186044415 MB
   G1HeapRegionSize         = 0 (0.0MB)
Heap Usage:
PS Young Generation
Eden Space:
   capacity = 90177536 (86.0MB)
   used     = 90177536 (86.0MB)
   free     = 0 (0.0MB)
   100.0% used
From Space:
   capacity = 89128960 (85.0MB)
   used     = 0 (0.0MB)
   free     = 89128960 (85.0MB)
   0.0% used
To Space:
   capacity = 89128960 (85.0MB)
   used     = 0 (0.0MB)
   free     = 89128960 (85.0MB)
   0.0% used
PS Old Generation
   capacity = 536870912 (512.0MB)
   used     = 473697416 (451.75305938720703MB)
   free     = 63173496 (60.24694061279297MB)
   88.23301941156387% used
6194 interned Strings occupying 540456 bytes.


使用命令查看最耗资源的对象（具体的实例数、占用资源大小及类名），有时候通过这个命令可以看到某一个对象，譬如是[B，但具体是哪个代码导致的[B对象最多需要更进一步分析memory dump。

jmap -histo:live PID| more num
 
num     #instances         #bytes  class name
----------------------------------------------
   1:        151052       17870656  [C
   2:         47998        4223824  java.lang.reflect.Method
   3:        148253        3558072  java.lang.String
   4:         73233        2929320  java.util.LinkedHashMap$Entry
   5:         89580        2866560  java.util.concurrent.ConcurrentHashMap$Node
   6:          1016        2481200  [J
   7:          9007        2102904  [B
   8:         17965        1988440  java.lang.Class
   9:         33022        1829704  [Ljava.lang.Object;
  10:         22682        1730600  [Ljava.util.HashMap$Node;
  11:         27472        1538432  java.util.LinkedHashMap
  12:          1542        1482032  [Ljava.util.concurrent.ConcurrentHashMap$Node;
  13:         29237         935584  java.util.HashMap$Node
  14:          6753         713424  [I
  15:         32099         692808  [Ljava.lang.Class;
  16:         25045         601080  org.springframework.core.MethodClassKey
  17:         11350         544800  java.util.HashMap
  18:         22034         528816  java.util.ArrayList
  19:         32010         512160  java.lang.Object
  20:          6233         498640  java.lang.reflect.Constructor
  21:         12783         409056  java.util.LinkedList
  22:         12121         387872  java.lang.ref.WeakReference
  23:          9392         375680  java.lang.ref.SoftReference
  24:         11301         362440  [Ljava.lang.String;
  25:          4368         314496  org.springframework.core.annotation.AnnotationAttributes
  26:          3025         290400  org.springframework.beans.GenericTypeAwarePropertyDescriptor
  27:          3971         285912  java.lang.reflect.Field
  28:          9513         228312  java.beans.MethodRef
  29:          9277         222648  java.util.LinkedList$Node
  30:            46         194424  [D
  31:          4496         179840  com.sun.org.apache.xerces.internal.dom.DeferredTextImpl
  32:         11133         178128  org.springframework.core.annotation.AnnotationUtils$DefaultValueHolder
  33:          3697         177456  org.springframework.core.ResolvableType
  34:         10910         174560  java.util.LinkedHashSet
  35:             3         165936  [Lcom.alibaba.druid.sql.parser.SymbolTable$Entry;
  36:          6795         163080  java.util.concurrent.atomic.AtomicLong
  37:          4056         162240  com.sun.org.apache.xerces.internal.dom.DeferredAttrImpl


使用命令生成java dump文件，会在当前执行命令的目录生成文件tomcat6755.hprof，可以用MAT进行分析

jmap -dump:format=b,file=tomcat6755.hprof PID
JVM启动参数添加memory dump记录变量，当程序发生内存溢出时，会自动生成memory dump文件

-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/heapdump.hprof
JVM Thred Dump判断程序问题
关于线程的不同状态描述如下：

1，线程状态为“waiting for monitor entry”：
意味着它 在等待进入一个临界区【临界区示意图】 ，所以它在”Entry Set“队列中等待。
此时线程状态一般都是 Blocked：
java.lang.Thread.State: BLOCKED (on object monitor)
 
2，如果大量线程在“waiting for monitor entry”：
可能是一个全局锁阻塞住了大量线程。
如果短时间内打印的 thread dump 文件反映，随着时间流逝，waiting for monitor entry 的线程越来越多，没有减少的趋势，可能意味着某些线程在临界区【临界区示意图】里呆的时间太长了，以至于越来越多新线程迟迟无法进入临界区。
 
3，线程状态为“waiting on condition”：
说明它在等待另一个条件的发生，来把自己唤醒，或者干脆它是调用了 sleep(N)。
此时线程状态大致为以下几种：
java.lang.Thread.State: WAITING (parking)：一直等那个条件发生；
java.lang.Thread.State: TIMED_WAITING (parking或sleeping)：定时的，那个条件不到来，也将定时唤醒自己。
 
4，如果大量线程在“waiting on condition”：
可能是它们又跑去获取第三方资源，尤其是第三方网络资源，迟迟获取不到Response，导致大量线程进入等待状态。
所以如果你发现有大量的线程都处在 Wait on condition，从线程堆栈看，正等待网络读写，这可能是一个网络瓶颈的征兆，因为网络阻塞导致线程无法执行。

使用命令生成java应用 thread dump文件

jstack PID > thread_PID.txt
案例一、线上某应用出现假死情况，查看dump文件大量的线程处于如下线程的Blocked状态

"catalina-exec-2000" daemon prio=10 tid=0x00007fc864ecf000 nid=0x2c70 waiting for monitor entry [0x00007fc7833ef000]
   java.lang.Thread.State: BLOCKED (on object monitor)
    at java.io.BufferedInputStream.available(BufferedInputStream.java:398)
    - waiting to lock <0x00000007890a4098> (a java.io.BufferedInputStream)
    at org.apache.commons.httpclient.HttpConnection.isStale(HttpConnection.java:502)
    at org.apache.commons.httpclient.HttpConnection.closeIfStale(HttpConnection.java:431)
    at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:382)
    at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171)
    at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397)
    at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323)
    at com.xxx.xxx.xxx.web.front.controller.XXXXController.download(XXXXController.java:347)
    at sun.reflect.GeneratedMethodAccessor135.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at org.springframework.web.bind.annotation.support.HandlerMethodInvoker.invokeHandlerMethod(HandlerMethodInvoker.java:176)
    at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.invokeHandlerMethod(AnnotationMethodHandlerAdapter.java:436)
    at org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter.handle(AnnotationMethodHandlerAdapter.java:424)
    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:790)
    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:719)
    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:669)
    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:574)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:722)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:304)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
    at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:368)
    at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:99)
    at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
    at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:109)
    at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:83)
    at org.springframework.security.web.access.intercept.FilterSecurityInterceptor$$FastClassByCGLIB$$28ea8438.invoke()
    at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:191)
    at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:688)
    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:150)
    at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:90)
    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:172)
    at org.springframework.aop.framework.Cglib2AopProxy$DynamicAdvisedInterceptor.intercept(Cglib2AopProxy.java:621)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
    at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:97)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
    at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:100)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
    at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:78)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
    at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
    at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:35)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
    at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:187)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
    at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:187)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
    at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
    at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
    at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:79)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
    at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:109)
    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:380)
    at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:169)
    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:237)
    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:167)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:76)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:240)
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:164)
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:462)
    at com.radiadesign.catalina.session.RedisSessionHandlerValve.invoke(RedisSessionHandlerValve.java:26)
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:164)
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)
    at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:636)
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:395)
    at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:250)
    at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:188)
    at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:166)
    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:302)
    - locked <0x0000000799cd18b0> (a org.apache.tomcat.util.net.SocketWrapper)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:745)


本案例中Thread Dump显示线程都是在Entry Set里等待着获取Monitor，具体看Dump信息

"catalina-exec-2000" daemon prio=10 tid=0x00007fc864ecf000 nid=0x2c70 waiting for monitor entry [0x00007fc7833ef000]
   java.lang.Thread.State: BLOCKED (on object monitor)
    at java.io.BufferedInputStream.available(BufferedInputStream.java:398)
    - waiting to lock <0x00000007890a4098> (a java.io.BufferedInputStream)


中间件线程都是在等待着0x00000007890a4098锁，等着进入临界区，也就是在Entry Set里一直等待，那么谁持有这个锁呢？是另一个同样调用了download方法，但Thread Status状态为RUNNABLE的线程，如下：

"catalina-exec-31" daemon prio=10 tid=0x00007fc864039000 nid=0x1563 runnable [0x00007fc807cf8000]
   java.lang.Thread.State: RUNNABLE
              at java.net.SocketInputStream.socketRead0(Native Method)
              at java.net.SocketInputStream.read(SocketInputStream.java:152)
              at java.net.SocketInputStream.read(SocketInputStream.java:122)
              at java.io.BufferedInputStream.fill(BufferedInputStream.java:235)
              at java.io.BufferedInputStream.read(BufferedInputStream.java:254)
              - locked <0x00000007890a4098> (a java.io.BufferedInputStream)
              at org.apache.commons.httpclient.HttpParser.readRawLine(HttpParser.java:78)
              at org.apache.commons.httpclient.HttpParser.readLine(HttpParser.java:106)
              at org.apache.commons.httpclient.HttpConnection.readLine(HttpConnection.java:1116)
              at org.apache.commons.httpclient.HttpMethodBase.readStatusLine(HttpMethodBase.java:1973)
              at org.apache.commons.httpclient.HttpMethodBase.readResponse(HttpMethodBase.java:1735)
              at org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:1098)
              at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:398)
              at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171)


再往下看，我们知道那些状态为Blocked的线程都在等待着获得一个锁，具体我们看看是什么锁，看at java.io.BufferedInputStream.available(BufferedInputStream.java:398)，查看JDK源码avaliable使用了同步synchronized关键字。

public synchronized int available()
    throws IOException {
    int i = this.count - this.pos;
    int j = getInIfOpen().available();
    return i > Integer.MAX_VALUE - j ? Integer.MAX_VALUE : i + j;
}


我们知道了产生问题的位置，那到底是什么原因导致的这个锁一直不释放呢？仍旧看下面的Threa Dump信息，看下面第7行代码。

"catalina-exec-31" daemon prio=10 tid=0x00007fc864039000 nid=0x1563 runnable [0x00007fc807cf8000]
   java.lang.Thread.State: RUNNABLE
              at java.net.SocketInputStream.socketRead0(Native Method)
              at java.net.SocketInputStream.read(SocketInputStream.java:152)
              at java.net.SocketInputStream.read(SocketInputStream.java:122)
              at java.io.BufferedInputStream.fill(BufferedInputStream.java:235)
              at java.io.BufferedInputStream.read(BufferedInputStream.java:254)
              - locked <0x00000007890a4098> (a java.io.BufferedInputStream)
              at org.apache.commons.httpclient.HttpParser.readRawLine(HttpParser.java:78)
              at org.apache.commons.httpclient.HttpParser.readLine(HttpParser.java:106)
              at org.apache.commons.httpclient.HttpConnection.readLine(HttpConnection.java:1116)
              at org.apache.commons.httpclient.HttpMethodBase.readStatusLine(HttpMethodBase.java:1973)
              at org.apache.commons.httpclient.HttpMethodBase.readResponse(HttpMethodBase.java:1735)
              at org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:1098)
              at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:398)
              at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171)
              at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397)


定位到jdk源码（关注红色标注部分），如下，

/**
     * See the general contract of the read method of InputStream.
     * @return     the next byte of data, or -1 if the end of the stream is reached.
     * @exception  IOException  if this input stream has been closed by invoking its {@link #close()} method, or an I/O error occurs.
     * @see        java.io.FilterInputStream#in
     */
    public synchronized int read() throws IOException {
        if (pos >= count) {
            fill();
            if (pos >= count)
                return -1;
        }
        return getBufIfOpen()[pos++] & 0xff;
    }


再看基类InputStream read方法源码（关注红色标注部分），This method blocks until input data is available, the end of the stream is detected, or an exception is thrown。也就是说这个方法会阻塞，直到input数据结束或者抛出异常，那么我们再回到Thread Dump中的堆栈信息，这个业务代码是要下载远程的一个pdf文件，因为是远程的资源下载必然会受网络方面的影响，如果出现这方面的影响这个read()方法将一直被阻塞，后续Thread会一直在等着这个锁，也就是我们看到的大量waiting for monitor entry，导致线程的状态为BLOCKED (on object monitor)。

/**
     * Reads the next byte of data from the input stream. The value byte is
     * returned as an int in the range 0 to
     * 255. If no byte is available because the end of the stream
     * has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected,
     * or an exception is thrown.
     * A subclass must provide an implementation of this method.
     * @return  the next byte of data, or -1 if the end of the  stream is reached.
     * @exception  IOException  if an I/O error occurs.
     */
    public abstract int read() throws IOException;


找到了阻塞的原因，那么怎么解决，实际上使用HttpClient发送http请求，底层是建立了Socket连接，那么Socket连接中是否有与这个阻塞相关的参数呢？看java.net. Socket类源码，SO_TIMEOUT被用于Socket连接中与read()方法阻塞相关的设置，如果此值设置为0，那么将一直被阻塞。

/**
     *  Enable/disable {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT} with the specified timeout, in milliseconds. With this option set to a non-zero timeout, a read() call on the InputStream associated with this Socket will block for only this amount of time.  If the timeout expires, a java.net.SocketTimeoutException is raised, though the Socket is still valid. The option must be enabled prior to entering the blocking operation to have effect. The timeout must be {@code > 0}.  A timeout of zero is interpreted as an infinite timeout.
     * @param timeout the specified timeout, in milliseconds.
     * @exception SocketException if there is an error
     * in the underlying protocol, such as a TCP error.
     * @since   JDK 1.1
     * @see #getSoTimeout()
     */
    public synchronized void setSoTimeout(int timeout) throws SocketException {
        if (isClosed())
            throw new SocketException("Socket is closed");
        if (timeout < 0)
          throw new IllegalArgumentException("timeout can't be negative");
        getImpl().setOption(SocketOptions.SO_TIMEOUT, new Integer(timeout));
    }


业务代码中我们没有看到设置这个参数，那么HttpClient默认设置的这个SO_TIMEOUT的值是多少呢？我们再回到Thread Dump信息中使用HttpClient的代码，看org.apache.commons.httpclient.HttpConnection的isStale()方法，注意下面第21行的代码，可以看出HttpClient在使用HttpConnection类时将Socket默认SO_TIMEOUT设置为0，结合上面我们看到的描述，read()方法正在读取数据，但未正常获取到输入流的结束标记，将一直被阻塞。

protected boolean isStale() throws IOException {
        boolean isStale = true;
        if (isOpen) {
            // the connection is open, but now we have to see if we can read it
            // assume the connection is not stale.
            isStale = false;
            try {
                if (inputStream.available() <= 0) {
                    try {
                        socket.setSoTimeout(1);
                        inputStream.mark(1);
                        int byteRead = inputStream.read();
                        if (byteRead == -1) {
                            // again - if the socket is reporting all data read,
                            // probably stale
                            isStale = true;
                        } else {
                            inputStream.reset();
                        }
                    } finally {
                        socket.setSoTimeout(this.params.getSoTimeout());
                    }
                }
            } catch (InterruptedIOException e) {
                if (!ExceptionUtil.isSocketTimeoutException(e)) {
                    throw e;
                }
                // aha - the connection is NOT stale - continue on!
            } catch (IOException e) {
                // oops - the connection is stale, the read or soTimeout failed.
                LOG.debug(
                    "An error occurred while reading from the socket, is appears to be stale",
                    e
                );
                isStale = true;
            }
        }
        return isStale;
    }


到这里整个过程就很清楚，对应的解决方法是给HttpClient的调用增加SO_TIMEOUT参数，参数值根据实际的业务场景而定，不要设置得过长（过长会阻塞后续的Thread），也不要设置得过短（过短如果读取数据超时会抛出SocketTimeoutException）。

